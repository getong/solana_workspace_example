* Todo Client IDL
:PROPERTIES:
:CUSTOM_ID: todo-client-idl
:END:
A Rust CLI client for interacting with the Solana Todo Program. This
client uses the IDL (Interface Definition Language) to dynamically
construct program interactions.

** Program Overview
:PROPERTIES:
:CUSTOM_ID: program-overview
:END:
The Todo Program is a Solana smart contract that manages a simple todo
list with the following constraints: - *Single PDA per user*: All todos
are stored in one account - *Maximum 10 todos*: Limited by on-chain
storage constraints - *Title limit*: 50 characters maximum -
*Description limit*: 200 characters maximum

** Architecture
:PROPERTIES:
:CUSTOM_ID: architecture
:END:
The program uses a single Program Derived Address (PDA) pattern: -
*Seed*: =TODO_ACC= + user's public key - *Account*: =TodoState=
containing all user's todos

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:
- Initialize a personal todo list account
- Add new todos with title and description
- Update todo completion status
- Remove todos by index
- List all todos
- Get specific todo details

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
*** Build
:PROPERTIES:
:CUSTOM_ID: build
:END:
#+begin_src sh
cargo build --release
#+end_src

*** Commands
:PROPERTIES:
:CUSTOM_ID: commands
:END:
**** Initialize Todo List
:PROPERTIES:
:CUSTOM_ID: initialize-todo-list
:END:
Creates a new todo list account for the user.

#+begin_src sh
cargo run -- init
#+end_src

**** Create Todo
:PROPERTIES:
:CUSTOM_ID: create-todo
:END:
Adds a new todo item to your list.

#+begin_src sh
cargo run -- create -t "Buy groceries" -d "Milk, eggs, bread, and vegetables"
#+end_src

**** List Todos
:PROPERTIES:
:CUSTOM_ID: list-todos
:END:
Displays all todos in your list.

#+begin_src sh
cargo run -- list
#+end_src

Output:

#+begin_example
Todo List:
[0] Buy groceries | Milk, eggs, bread, and vegetables - ☐
[1] Finish report | Complete quarterly report by Friday - ☐
[2] Exercise | 30 minutes of jogging - ✓
#+end_example

**** Update Todo
:PROPERTIES:
:CUSTOM_ID: update-todo
:END:
Marks a todo as completed or uncompleted.

#+begin_src sh
# Mark todo at index 0 as completed
cargo run -- update -i 0 -c true

# Mark todo at index 0 as not completed
cargo run -- update -i 0 -c false
#+end_src

**** Delete Todo
:PROPERTIES:
:CUSTOM_ID: delete-todo
:END:
Removes a todo from the list by index.

#+begin_src sh
cargo run -- delete -i 1
#+end_src

**** Get Todo Details
:PROPERTIES:
:CUSTOM_ID: get-todo-details
:END:
Displays detailed information about a specific todo.

#+begin_src sh
cargo run -- get -i 0
#+end_src

Output:

#+begin_example
Todo Item [0]:
  Title: Buy groceries
  Description: Milk, eggs, bread, and vegetables
  Completed: No
#+end_example

*** Configuration Options
:PROPERTIES:
:CUSTOM_ID: configuration-options
:END:
- =--keypair=: Path to Solana keypair file (default:
  =~/.config/solana/id.json=)
- =--url=: RPC URL (default: =http://localhost:8899=)
- =--program-id=: Program ID (default:
  =6Cjd4PNSWMyFbsA2MTXtEkxhnAgWzjDQV969kFjQJukL=)

*** Example with Custom Configuration
:PROPERTIES:
:CUSTOM_ID: example-with-custom-configuration
:END:
#+begin_src sh
cargo run -- --keypair ~/my-wallet.json --url https://api.devnet.solana.com create -t "Test" -d "Testing on devnet"
#+end_src

** Error Handling
:PROPERTIES:
:CUSTOM_ID: error-handling
:END:
The program includes comprehensive error handling for: - =TitleTooLong=:
Title exceeds 50 characters - =DescriptionTooLong=: Description exceeds
200 characters - =MaxTodosReached=: Attempting to add more than 10
todos - =InvalidTodoIndex=: Accessing a todo that doesn't exist

** Technical Details
:PROPERTIES:
:CUSTOM_ID: technical-details
:END:
*** IDL Structure
:PROPERTIES:
:CUSTOM_ID: idl-structure
:END:
The client reads the =pda_limitation.json= IDL file to understand: -
Instruction discriminators - Account structures - Argument types - Error
codes

*** Account Structure
:PROPERTIES:
:CUSTOM_ID: account-structure
:END:
#+begin_src rust
TodoState {
    key: Pubkey,           // User's public key
    bump: u8,              // PDA bump seed
    todos: Vec<Todo>,      // List of todos (max 10)
    total_todos: u64,      // Total number of todos created
}

Todo {
    title: String,         // Max 50 characters
    description: String,   // Max 200 characters
    is_completed: bool,    // Completion status
}
#+end_src

** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:
This client demonstrates: - IDL-based program interaction - PDA
derivation and account management - Instruction construction and
sending - Account deserialization - Error handling and user feedback

** cli example
:PROPERTIES:
:CUSTOM_ID: cli-example
:END:
#+begin_src shell
# Initialize
cargo run --bin todo_client_raw -- --keypair ~/solana-wallets/alice.json init

# Create a todo
cargo run --bin todo_client_raw -- --keypair ~/solana-wallets/alice.json create -t "New task" -d "Task description"

# List todos
cargo run --bin todo_client_raw -- --keypair ~/solana-wallets/alice.json list
#+end_src

** Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies
:END:
- =anchor-lang=: Anchor framework
- =solana-sdk=: Solana SDK
- =serde_json=: JSON parsing for IDL
- =clap=: Command-line argument parsing
- =shellexpand=: Path expansion
